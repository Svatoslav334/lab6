#include<iostream>
#include<cstring>
#include<string>
#include<iomanip>
#include<Windows.h>
#include "Welcome.h"
#include <vector>
#include <algorithm>
#include<fstream>
#include<iomanip>

using namespace std;
int f = 0; // чтобы узнавать, запускалась ли программа ранее
struct teachers {
	string fam;
	string name;
	string otch;
	enum status { prepod=1, docent, doctor_nauk } st;
	int day; int mounth; int year;

	int status_int;
};

vector<struct teachers> teacherList; // Создаем пустой список учителей
void dobav()
{
	struct teachers teacher;
	cout << "Введите фамилию : ";
	cin >> teacher.fam;
	cout << "Введите имя : ";
	cin >> teacher.name;
	cout << "Введите отчество : ";
	cin >> teacher.otch;
	cout << "Введите статус (1-преподаватель, 2-доцент, 3-доктор наук : " << endl;
	int i;
	cin >> i;
	cout << "Введите дату последней аттестации(пример: число месяц год) : " << endl;
	cin >> teacher.day;cin >> teacher.mounth;cin >> teacher.year;

	switch (i)
	{
	case 1:
		teacher.st = teachers::prepod;break;

	case 2:
		teacher.st = teachers::docent;break;

	case 3:
		teacher.st = teachers::doctor_nauk;break;
	}
	teacher.status_int = i;
	// Добавляем учителя в список
	teacherList.push_back(teacher);
}
string state_switch(teachers::status st) {
	switch (st) {
	case teachers::prepod:
		return "преподаватель";
	case teachers::docent:
		return "доцент";
	case teachers::doctor_nauk:
		return "доктор наук";
	default:
		return "неизвестный статус";
	}
}

void print() {
	cout << "..................................................................................."<<endl;
	cout <<endl<<setw(1)<<"№"<< setw(13) << "Фамилия" << setw(15) << "Имя " << setw(15)<<"Отчество"<< setw(15) << "Статус " <<setw(15)<<"Дата последней аттестации" << endl;
	for (size_t i = 0; i < teacherList.size(); ++i) {
		string statusString = state_switch(teacherList[i].st);
		cout << setw(1) << i + 1 << ": " << setw(12) << teacherList[i].fam<< setw(14) << teacherList[i].name<<setw(15)<<teacherList[i].otch<<setw(15)<< statusString << setw(14) << teacherList[i].day<<"."<< teacherList[i].mounth<<"."<< teacherList[i].year << endl;
	}
	cout << "..................................................................................." << endl<<endl<<endl<<endl;

}

void poisk_fam_name() {
	string fam_p, name_p;
	cout << "Ведите фамилию и имя пользователя, которого вы хотите найти : ";
	cin >> fam_p >> name_p;
	cout << endl;
	int flag = 0;
	for (size_t i = 0; i < teacherList.size(); ++i) {
		string statusString = state_switch(teacherList[i].st);
		if (fam_p == teacherList[i].fam && name_p == teacherList[i].name) {
			cout<<"Нашёлся пользователь: " << setw(1) << i + 1 << ": " << setw(12) << teacherList[i].fam << setw(14) << teacherList[i].name << setw(14) << teacherList[i].otch<< setw(15) << statusString << setw(14) << teacherList[i].day << "." << teacherList[i].mounth << teacherList[i].year << endl;
			flag = 1;

		}
	}
	if (flag == 0) cout << "Такого пользователя нет"<<endl;
}

void poisk_status() {
	int stat_i;
	cout << "Ведите стутус пользователя(ей), которого(ых) вы хотите найти(преподаватель=1, доцент=2, доктор наук-3) : ";
	cin >> stat_i;cout << endl;
	int flag = 0;
	for (size_t i = 0; i < teacherList.size(); ++i) {
		string statusString = state_switch(teacherList[i].st);
		if (stat_i == teacherList[i].status_int) {
			cout<< setw(1) << i + 1 << ": " << setw(12) << teacherList[i].fam << setw(14) << teacherList[i].name << setw(15) << teacherList[i].otch<<setw(15) << statusString << setw(14) << teacherList[i].day << "." << teacherList[i].mounth << teacherList[i].year << endl;
			flag = 1;
		}
	}
	if (flag == 0) cout << "Нет пользователей с таким статусом" << endl;
}

bool compareByFam(const teachers& a, const teachers& b) {
	return a.fam < b.fam;
}
void dele_last() {
	teacherList.pop_back();
}
void filtr_fam() {
	// Сортировка списка учителей по фамилии
	sort(teacherList.begin(), teacherList.end(), compareByFam);
	// Вывод отсортированного списка учителей
	print();
}
void download() {
	// эта функция берёт все данные из файла
	ifstream fin;
	fin.open("data.txt");
	string q;
	fin >> q;
	while (fin) {
		struct teachers teacher;
		fin >> teacher.fam;
		fin >> teacher.name;
		fin >> teacher.otch;
		int i;
		fin >> i;
		switch (i)
		{
		case 1:
			teacher.st = teachers::prepod;break;

		case 2:
			teacher.st = teachers::docent;break;

		case 3:
			teacher.st = teachers::doctor_nauk;break;
		}
		teacher.status_int = i;
		
		fin >> teacher.day;fin >> teacher.mounth;fin >> teacher.year;
		// Добавляем учителей в список
		teacherList.push_back(teacher);
	}
	fin.close();
	dele_last();
}
void exit1() {
	ofstream fout;
	fout.open("data.txt");
	if (fout.is_open()) {
		fout << "data" << endl;

		for (size_t i = 0; i < teacherList.size(); ++i) {
			fout<< teacherList[i].fam <<" " << teacherList[i].name<<" " << teacherList[i].otch<<" " << teacherList[i].st << setw(14) << teacherList[i].day<<" "<< teacherList[i].mounth<<" "<<teacherList[i].year  << endl;
		}
	}
	else {
		cout << "нельяз открыть";
	}
	fout.close();
	exit(0);
}
void proverka_at() {
	int now_day, now_mounth, now_year,f=0;
	cout << "Введите сегодняшнюю дату в формате: день месяц год : ";
	cin >> now_day >> now_mounth >> now_year;

	for (size_t i = 0; i < teacherList.size(); ++i) {
		string statusString = state_switch(teacherList[i].st);
		if ( (teacherList[i].year+5) < now_year) {
			cout << "У преподавателя просрочилась аттестация " << setw(1) << i + 1 << ": " << setw(12) << teacherList[i].fam << setw(14) << teacherList[i].name << setw(15) << teacherList[i].otch << setw(15) << statusString << setw(14) << teacherList[i].day << "." << teacherList[i].mounth << "." << teacherList[i].year << endl;
			f = 1;
		}
		else if((teacherList[i].year+5) == now_year && teacherList[i].mounth < now_mounth){
			cout << "У преподавателя просрочилась аттестация " << setw(1) << i + 1 << ": " << setw(12) << teacherList[i].fam << setw(14) << teacherList[i].name << setw(15) << teacherList[i].otch << setw(15) << statusString << setw(14) << teacherList[i].day << "." << teacherList[i].mounth << "." << teacherList[i].year << endl;
			f = 1;
		}
		else if ((teacherList[i].year+5) == now_year && teacherList[i].mounth == now_mounth && teacherList[i].day < now_day) {
			cout << "У преподавателя просрочилась аттестация " << setw(1) << i + 1 << ": " << setw(12) << teacherList[i].fam << setw(14) << teacherList[i].name << setw(15) << teacherList[i].otch << setw(15) << statusString << setw(14) << teacherList[i].day << "." << teacherList[i].mounth << "." << teacherList[i].year << endl;
			f = 1;
		}
	}
	if (f == 0) {
		cout << "Не нашлось просроченных"<<endl;
	}
}
int main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	setlocale(LC_ALL, "ru");
	int size = 0;
	int q;
	ifstream fin;
	fin.open("data.txt");
	string proverka;
	fin >> proverka;
	fin.close();
	cout <<"в файле "<< proverka;
	if (proverka == "") {
		cout << "ничего нет"<<endl;
		f = 0;
		welcome();
		cin >> q;
		string s;

		while (q==0 || q==1 || q==2 || q==3 || q==5 || q==6) {
			if (q == 1) dobav();
			if (q == 2) print();
			if (q == 3) poisk_fam_name();
			if (q == 4) poisk_status();
			if (q == 5) filtr_fam();
			if (q == 6) proverka_at;
			if (q == 0) exit1();
			welcome();
			cin >> q;
		}
	}
	else {
		cout << "были данные"<<endl;
		f = 1;
		download();
		welcome();
		cin >> q;
		string s;

		while (q == 0 || q == 1 || q == 2 || q == 3 || q == 5 || q==6) {
			if (q == 1) dobav();
			if (q == 2) print();
			if (q == 3) poisk_fam_name();
			if (q == 4) poisk_status();
			if (q == 5) filtr_fam();
			if (q == 6) proverka_at();
			if (q == 0) exit1();
			welcome();
			cin >> q;
		}
	}

	cin.get();
}